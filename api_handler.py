import random
from datetime import datetime
from io import BytesIO
from bs4 import BeautifulSoup

from PIL import Image
from dotenv import load_dotenv
import os
import requests
import json
import re

from together import Together

# Naƒçten√≠ API kl√≠ƒçe z .env souboru
load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")
NASA_API_KEY = os.getenv("NASA_API_KEY")
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")


def generate_with_gemini(prompt, model="gemini-2.0-flash", max_retries=3):
    """
    Z√≠sk√°v√° odpovƒõƒè od Google Gemini API pomoc√≠ p≈ô√≠m√Ωch HTTP po≈æadavk≈Ø.

    Args:
        prompt (str): Textov√Ω vstup (prompt) pro AI
        model (str): Pou≈æit√Ω model (v√Ωchoz√≠ je gemini-2.0-flash)
        max_retries (int): Maxim√°ln√≠ poƒçet opakov√°n√≠ p≈ôi chybƒõ

    Returns:
        str: Odpovƒõƒè od AI nebo None pokud sel≈æe
    """

    url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={GEMINI_API_KEY}"

    headers = {
        'Content-Type': 'application/json'
    }

    payload = {
        "contents": [{
            "parts": [{
                "text": prompt
            }]
        }]
    }

    for attempt in range(max_retries):
        try:
            response = requests.post(url, headers=headers, data=json.dumps(payload))
            response.raise_for_status()

            data = response.json()

            if data and 'candidates' in data and len(data['candidates']) > 0:
                return data['candidates'][0]['content']['parts'][0]['text']
            else:
                print(f"Attempt {attempt + 1}: Empty response from API")

        except requests.exceptions.RequestException as e:
            print(f"Attempt {attempt + 1} failed with error: {str(e)}")
            if attempt == max_retries - 1:
                return None

        except (KeyError, IndexError) as e:
            print(f"Attempt {attempt + 1}: Failed to parse response - {str(e)}")
            if attempt == max_retries - 1:
                return None

    return None

def generate_with_deepseek(prompt, model="deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free", max_retries=3):
    """
    Z√≠sk√°v√° odpovƒõƒè od Together AI API pomoc√≠ DeepSeek modelu.

    Args:
        prompt (str): Textov√Ω vstup (prompt) pro AI
        model (str): Pou≈æit√Ω model (v√Ωchoz√≠ je deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free)
        max_retries (int): Maxim√°ln√≠ poƒçet opakov√°n√≠ p≈ôi chybƒõ

    Returns:
        str: Odpovƒõƒè od AI nebo None pokud sel≈æe
    """

    # Inicializace Together klienta
    client = Together(api_key=TOGETHER_API_KEY)  # P≈ôedpokl√°d√°, ≈æe TOGETHER_API_KEY je glob√°ln√≠ promƒõnn√°

    for attempt in range(max_retries):
        try:
            # Odesl√°n√≠ po≈æadavku na API
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {
                        "role": "user",
                        "content": prompt
                    }
                ]
            )

            # Zpracov√°n√≠ odpovƒõdi
            if response and response.choices and len(response.choices) > 0:
                full_response = response.choices[0].message.content
                # Odstranƒõn√≠ <think> ƒç√°sti pokud existuje
                if "<think>" in full_response and "</think>" in full_response:
                    return full_response.split("</think>")[-1].strip()
                return full_response
            else:
                print(f"Pokus {attempt + 1}: Pr√°zdn√° odpovƒõƒè z API")

        except Exception as e:  # Zachycen√≠ v≈°ech v√Ωjimek, proto≈æe Together knihovna m≈Ø≈æe vyhodit r≈Øzn√© typy
            print(f"Pokus {attempt + 1} selhal s chybou: {str(e)}")
            if attempt == max_retries - 1:
                return None

    return None


def get_nasa_apod():
    """
    Naƒçte dne≈°n√≠ data APOD (Astronomick√Ω sn√≠mek dne) z NASA API.
    Vrac√≠ slovn√≠k s 'hdurl' a 'vysvƒõtlen√≠', nebo None v p≈ô√≠padƒõ chyby.
    """
    if not NASA_API_KEY:
        print("‚ùå [api_handler] NASA_API_KEY nen√≠ nastaveno v .env souboru.")
        return None
    try:
        res = requests.get(f"https://api.nasa.gov/planetary/apod?api_key={NASA_API_KEY}")
        if res.status_code != 200:
            print(f"‚ùå [api_handler] Chyba {res.status_code} p≈ôi vol√°n√≠ NASA APOD API.")
            return None
        data = res.json()

        # Vr√°tit None pokud m√° sn√≠mek copyright
        #if "copyright" in data:
        #    print("‚ùå [api_handler] Sn√≠mek m√° copyright, nelze pou≈æ√≠t.")
        #    return None

        url = data.get("hdurl") or data.get("url")
        explanation = data.get("explanation")
        if not url or not explanation:
            print("‚ùå [api_handler] Chyb√≠ URL nebo explanation v odpovƒõdi NASA.")
            return None
        return {
            "hdurl": url,
            "explanation": explanation
        }
    except Exception as e:
        print(f"‚ùå [api_handler] V√Ωjimka p≈ôi vol√°n√≠ NASA APOD API: {e}")
        return None

def generate_ai_background(width=1080, height=1080):
    """Generuje pozad√≠ s podrobn√Ωm logov√°n√≠m"""
    if not TOGETHER_API_KEY:
        print("‚ùå [AI] Chyb√≠ TOGETHER_API_KEY v .env")
        return None

    MODEL_CONFIG = {
        "model": "black-forest-labs/FLUX.1-schnell-Free",
        "steps": 4,
        "size": 1024,
        "prompts": [
          "calm autumn landscape with falling leaves and soft light",
          "cozy corner with pillows and candles under dim lighting",
          "forest clearing covered in morning mist",
          "minimalist room with natural tones and soft lighting",
          "mountain cabin in winter with glowing window and snowy landscape",
          "soft sunlight streaming through curtains",
          "peaceful lake surrounded by trees at sunset",
          "Scandinavian interior with muted lights",
          "reading nook with a blanket, book, and hot tea",
          "quiet morning forest with dewdrops on leaves",
          "relaxing caf√© with wooden furniture and plants",
          "neutral background with watercolor texture in beige tones",
          "night cityscape from afar with gentle bokeh",
          "cozy bed with duvets and soft lamp light",
          "old wooden table with a cup of coffee and a journal",
          "view from a window on a rainy day",
          "lightly snow-covered fields under a grey sky",
          "forest path with soft moss and diffused light",
          "cozy fireplace corner with a fluffy rug",
          "minimalist background with pastel shades",
          "mountain valley in mist and morning light",
          "soft blanket draped over a warm-toned sofa",
          "quiet beach at sunrise with no people",
          "blooming meadow in pastel colors",
          "rainy window with blurred droplets and warm indoor light",
          "modern room with houseplants and an aroma diffuser",
          "quiet evening riverside with lanterns",
          "library with old books and soft lighting",
          "waving wheat in golden light",
          "glowing lanterns hanging in a garden at dusk",
          "soft textures of beige and grey fabrics",
          "relaxed afternoon with coffee on the terrace",
          "blurred light effects in warm tones",
          "quiet alley in an old town with no people",
          "aerial view of foggy mountains",
          "wooden interior with natural decorations",
          "cozy lantern light in the garden at twilight",
          "pastel sunset over water surface",
          "calm tones of grey, beige, and white in a natural style",
          "tea ceremony in a Japanese room",
          "shadow of a tree falling on a wall",
          "green houseplants on a windowsill in morning light",
          "road fading into fog with autumn trees",
          "cozy kitchen with herbs and warm lighting",
          "neutral marble texture with soft reflections",
          "old radio and a tea mug on a wooden cabinet",
          "half-empty caf√© with a retro feel",
          "peaceful evening on a balcony with a blanket and tea",
          "zen garden with stones and sand",
          "soft pastel colors and blurred light"
        ]
    }

    try:
        client = Together(api_key=TOGETHER_API_KEY)

        prompt = random.choice(MODEL_CONFIG["prompts"])
        prompt = "hyper realistic environment, "+prompt


        response = client.images.generate(
            prompt=prompt,
            model=MODEL_CONFIG["model"],
            steps=MODEL_CONFIG["steps"],
            width=MODEL_CONFIG["size"],
            height=MODEL_CONFIG["size"],
            n=1
        )

        if not response or not response.data:
            print("‚ùå [AI] API nevr√°tilo ≈æ√°dn√° data")
            return None

        image_url = response.data[0].url
        print(f"üìù [AI] Pou≈æit√Ω prompt: '{prompt}'")
        print(f"üîó [AI] Kompletn√≠ URL obr√°zku:\n{image_url}")  # Vyp√≠≈°e celou URL

        print("‚¨áÔ∏è [AI] Stahuji obr√°zek...")
        img_response = requests.get(image_url, timeout=10)
        img_response.raise_for_status()

        img = Image.open(BytesIO(img_response.content))
        print(f"üñºÔ∏è [AI] Sta≈æeno: {img.size} ({img.format}), m√≥d: {img.mode}")

        if img.size != (width, height):
            print(f"üîÑ [AI] Zmƒõna velikosti na {width}x{height}")
            img = img.resize((width, height), Image.Resampling.LANCZOS)

        return img.convert('RGBA')

    except Exception as e:
        print(f"‚ùå [AI] Chyba p≈ôi generov√°n√≠:")
        import traceback
        traceback.print_exc()
        return None


def clean_event_name(text):
    """Vyƒçist√≠ n√°zev ud√°losti od z√°vorek a jejich obsahu"""
    # Odstran√≠me hranat√© z√°vorky s ƒç√≠sly [123]
    text = re.sub(r'\[\d+\]', '', text)
    # Odstran√≠me kulat√© z√°vorky a jejich obsah (I Forgot Day)
    text = re.sub(r'\([^)]*\)', '', text)
    # Odstran√≠me p≈ôebyteƒçn√© mezery a o≈ô√≠zneme text
    return ' '.join(text.split()).strip()


def get_todays_international_days():
    # ƒåesk√© n√°zvy mƒõs√≠c≈Ø
    czech_months = {
        1: 'leden', 2: '√∫nor', 3: 'b≈ôezen', 4: 'duben', 5: 'kvƒõten',
        6: 'ƒçerven', 7: 'ƒçervenec', 8: 'srpen', 9: 'z√°≈ô√≠',
        10: '≈ô√≠jen', 11: 'listopad', 12: 'prosinec'
    }

    # Z√≠sk√°n√≠ aktu√°ln√≠ho data
    today = datetime.today()
    day = today.day
    month = today.month
    today_str = f"{day}. {czech_months[month]}"
    #print(f"[DEBUG] Hled√°m dne≈°n√≠ datum: {today_str}")

    try:
        # Sta≈æen√≠ str√°nky
        url = "https://cs.wikipedia.org/wiki/Mezin%C3%A1rodn%C3%AD_dny_a_roky"
        #print(f"[DEBUG] Stahuji str√°nku: {url}")
        headers = {"User-Agent": "NameDayInstagramBot/1.0 (https://github.com/greeeen013/NameDayInstagramBot)"}
        response = requests.get(url, headers=headers)
        response.raise_for_status()

        # Parsov√°n√≠ HTML
        soup = BeautifulSoup(response.content, 'html.parser')

        # Nalezen√≠ tabulky mezin√°rodn√≠ch dn≈Ø
        #print("[DEBUG] Hled√°m tabulku mezin√°rodn√≠ch dn≈Ø...")
        tables = soup.find_all('table', {'class': 'wikitable'})
        table = None
        for t in tables:
            if "Datum" in str(t):
                table = t
                break
        if not table:
            #print("[DEBUG] Tabulka nebyla nalezena!")
            return []
        #print("[DEBUG] Tabulka nalezena")

        events = []
        found_today = False
        collect_events = False

        # Proch√°zen√≠ ≈ô√°dk≈Ø tabulky
        #print("[DEBUG] Proch√°z√≠m ≈ô√°dky tabulky...")
        for row in table.find_all('tr'):
            cells = row.find_all('td')
            if not cells:
                continue

            # Zpracov√°n√≠ prvn√≠ho sloupce (datum)
            date_cell = cells[0]
            date_text = date_cell.get_text().strip()
            #print(f"[DEBUG] Zpracov√°v√°m ≈ô√°dek s datem/textem: {date_text}")

            # Zvl√°≈°tn√≠ p≈ô√≠pad - kdy≈æ je n√°zev dne p≈ô√≠mo v date_cell
            if ("den" in date_text or "dny" in date_text) and found_today:
                clean_text = clean_event_name(date_text)
                #print(f"[DEBUG] Nalezen den p≈ô√≠mo v datov√©m sloupci: {clean_text}")
                events.append(clean_text)
                continue

            # Kontrola form√°tu data (den. mƒõs√≠c)
            if '.' in date_text:
                if found_today and date_text != today_str:
                    #print(f"[DEBUG] Nalezeno dal≈°√≠ datum: {date_text}, ukonƒçuji hled√°n√≠")
                    break

                if date_text == today_str:
                    found_today = True
                    collect_events = True
                    #print("[DEBUG] Nalezeno dne≈°n√≠ datum! Zaƒç√≠n√°m sb√≠rat ud√°losti...")

            # Sb√≠r√°n√≠ ud√°lost√≠ pro dne≈°n√≠ datum
            if collect_events and len(cells) > 1:
                event_cell = cells[1]
                event_text = event_cell.get_text().strip()
                #print(f"[DEBUG] Zpracov√°v√°m ud√°lost: {event_text}")

                # Hled√°n√≠ n√°zv≈Ø obsahuj√≠c√≠ch "den" nebo "dny"
                if "den" in event_text or "dny" in event_text:
                    #print("[DEBUG] Nalezena ud√°lost obsahuj√≠c√≠ 'den' nebo 'dny'")
                    # Extrakce jednotliv√Ωch n√°zv≈Ø mezin√°rodn√≠ch dn≈Ø
                    for sub in event_cell.find_all(['a', 'sup']):
                        sub_text = sub.get_text().strip()
                        if "den" in sub_text or "dny" in sub_text:
                            clean_text = clean_event_name(sub_text)
                            #print(f"[DEBUG] P≈ôid√°v√°m ud√°lost: {clean_text}")
                            events.append(clean_text)

                    # P≈ôid√°n√≠ cel√©ho textu, pokud neobsahuje podprvky
                    if not any("den" in e or "dny" in e for e in events):
                        clean_text = clean_event_name(event_text)
                        #print(f"[DEBUG] P≈ôid√°v√°m celou ud√°lost: {clean_text}")
                        events.append(clean_text)

        # Zpracov√°n√≠ ud√°lost√≠
        #print("[DEBUG] Filtruji a upravuji v√Ωsledn√© ud√°losti...")
        final_events = []
        for event in events:
            # Rozdƒõlen√≠ text≈Ø s ƒç√°rkami
            if ',' in event:
                for e in event.split(','):
                    e = clean_event_name(e.strip())
                    if "den" in e or "dny" in e:
                        final_events.append(e)
            else:
                final_events.append(event)

        # Odstranƒõn√≠ duplicit a pr√°zdn√Ωch ≈ôetƒõzc≈Ø
        final_events = list(set([e for e in final_events if e]))
        #print(f"[DEBUG] Koneƒçn√Ω seznam ud√°lost√≠: {final_events}")
        return final_events

    except Exception as e:
        print(f"[get_todays_international_days] Chyba p≈ôi zpracov√°n√≠: {e}")
        return []

if __name__ == "__main__":
    print(get_nasa_apod())
    # Testov√°n√≠ funkce
    events = get_todays_international_days()
    if events:
        print("Dne≈°n√≠ mezin√°rodn√≠ dny:")
        for event in events:
            print(f"- {event}")
    #else:
    #    print("≈Ω√°dn√© mezin√°rodn√≠ dny dnes nenalezeny.")